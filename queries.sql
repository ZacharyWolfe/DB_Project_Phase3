-- Creates queries for the database.
-- Zachary Wolfe
-- Matt Taylor

-- Query 1

SELECT TOPPING_NAME, INVENTORY_LEVEL, INVENTORY_LEVEL / AMOUNT_XLarge AS CAN_MAKE_XLARGE
  FROM TOPPINGS
  ORDER BY TOPPING_NAME ASC;

-- Query 2

SELECT SUM(PRICE) AS TOTAL_PRICE, SUM(BUSINESS_COST) AS TOTAL_EXPENSES, TOTAL_PRICE - TOTAL_EXPENSES AS TOTAL_PROFIT, DATE(TIME_STAMP) AS Order_Date
  FROM ORDERS;
  JOIN PIZZA USING (ORDER_ID)
  ORDER BY Order_Date ASC;

-- Query 3

SELECT CUSTOMER_NAME, COUNT(*) AS TOTAL_ORDERS, AVG(TOTAL_PRICE) AS AVG_ORDER_PRICE, SUM(TOTAL_PRICE) AS TOTAL_ORDER_PRICE, MAX(TOTAL_PRICE) AS MAX_ORDER_PRICE, MIN(TOTAL_PRICE) AS MIN_ORDER_PRICE 
  FROM CUSTOMERS 
  JOIN ORDERS USING (CUSTOMER_ID) 
  WHERE ORDER_ID NOT IN (SELECT DINE_IN_ID FROM DINE_IN) 
  GROUP BY CUSTOMER_NAME;

-- Query 4

SELECT AVG(SEAT_NUMBER) AS AVG_SEATS_PER_ORDER, AVG(TOTAL_PRICE) AS AVG_ORDER_PRICE, SUM(TOTAL_PRICE) AS TOTAL_ORDER_PRICE, MAX(TOTAL_PRICE) AS MAX_ORDER_PRICE, MIN(TOTAL_PRICE) AS MIN_ORDER_PRICE 
  FROM ORDERS 
  JOIN DINE_IN USING (ORDER_ID) 
  JOIN SEATS ON DINE_IN_ID = SEAT_ID;

-- Query 5

SELECT CRUST_TYPE, BASE_SIZE, TOPPING_NAME, REQUIRES_DOUBLE 
  FROM PIZZA 
  JOIN HAS_TOPPING USING (PIZZA_ID) 
  WHERE TIME_STAMP = '2024-03-05 19:11:00' 
  ORDER BY PIZZA_ID, TOPPING_NAME;

-- Query 6

SELECT DATE(TIME_STAMP) AS ORDER_DATE, 
  CASE 
    WHEN DINE_IN_ID IS NOT NULL THEN 'Dine-In' 
    WHEN DELIVERY_ID IS NOT NULL THEN 'Delivery' 
    WHEN PICKUP_ID IS NOT NULL THEN 'Pick-Up' 
  END 
  ORDER_TYPE, COUNT(DISTINCT ORDER_ID) AS TOTAL_ORDERS, COUNT(PIZZA_ID) AS TOTAL_PIZZAS, SUM(TOTAL_PRICE) AS TOTAL_ORDER_PRICE 
  FROM ORDERS 
  LEFT JOIN DINE_IN USING (ORDER_ID) 
  LEFT JOIN DELIVERY USING (ORDER_ID) 
  LEFT JOIN PICKUP USING (ORDER_ID) 
  JOIN PIZZA USING (ORDER_ID) 
  GROUP BY ORDER_DATE, ORDER_TYPE 
  ORDER BY ORDER_DATE, ORDER_TYPE;

-- Query 7

SELECT DISCOUNT_NAME, COUNT(ORDER_DISCOUNT_ID) TOTAL_ORDERS, 
  SUM(CASE 
        WHEN PERCENT_OFF IS NOT NULL THEN (PERCENT_OFF / 100) * TOTAL_PRICE 
        WHEN DOLLAR_OFF IS NOT NULL THEN DOLLAR_OFF 
        ELSE 0 
      END) TOTAL_SAVINGS 
FROM DISCOUNT 
LEFT JOIN ORDER_DISCOUNT USING (DISCOUNT_ID) 
LEFT JOIN ORDERS ON ORDER_DISCOUNT_ID = ORDER_ID 
GROUP BY DISCOUNT_NAME;

-- Query 8

SELECT TOPPING_NAME, SUM(CASE WHEN REQUIRES_DOUBLE THEN 2 ELSE 1 END) AS TOTAL_USED 
  FROM HAS_TOPPING 
  JOIN PIZZA USING (PIZZA_ID) 
  WHERE DATE(TIME_STAMP) = '2024-03-03' 
  GROUP BY TOPPING_NAME 
  ORDER BY TOPPING_NAME;

-- Query 9

SELECT BASE_SIZE, COUNT(*) AS TOTAL_PIZZAS, AVG(PRICE) AS AVG_PRICE, AVG(BUSINESS_COST) AS AVG_COST 
  FROM PIZZA 
  GROUP BY BASE_SIZE;

-- Query 10

SELECT CRUST_TYPE, COUNT(*) AS TOTAL_PIZZAS, AVG(PRICE) AS AVG_PRICE, AVG(BUSINESS_COST) AS AVG_COST 
  FROM PIZZA 
  GROUP BY CRUST_TYPE;
